generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Authentication Model

enum Tier {
  BRONZE
  SILVER
  GOLD
  PLATINUM

  @@map("tier")
}

model User {
  id        Int        @id @default(autoincrement())
  username  String     @unique
  password  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  points    Int        @default(0)
  tier      Tier?
  favorites MenuItem[]
  orders    Orders[]

  @@map("user")
}

// Restaurant Models

model Restaurant {
  id      Int      @id @default(autoincrement())
  name    String
  address String
  phone   String
  menu    Menu     @relation(fields: [menuId], references: [id])
  menuId  Int      @unique
  orders  Orders[]

  @@map("restaurant")
}

// Food Models
enum FoodCategory {
  APPETIZERS
  WINGS
  FAJITAS
  BURGERS
  STEAKS
  SEAFOOD
  BEVERAGES
  DESSERTS

  @@map("food_category")
}

model MenuItem {
  id                Int          @id @default(autoincrement())
  name              String       @unique
  price             Float
  description       String
  category          FoodCategory
  favorited_by_user User?        @relation(fields: [userId], references: [id])
  userId            Int?

  menu   Menu? @relation(fields: [menuId], references: [id])
  menuId Int?

  @@map("menu_item")
}

model Menu {
  id                  Int         @id @default(autoincrement())
  items               MenuItem[]
  found_at_restaurant Restaurant?
  restaurantId        Int?

  @@map("menu")
}

// Business Models
model Orders {
  id           Int        @id @default(autoincrement())
  userId       Int
  restaurantId Int
  total        Decimal    @db.Decimal(10, 2)
  user         User       @relation(fields: [userId], references: [id])
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

  @@index([userId], name: "userId")
  @@index([restaurantId], name: "restaurantId")
  @@map("orders")
}
