// Required Prisma generator and datasources

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Rewards and Food category enums
enum Tier {
  BRONZE
  SILVER
  GOLD
  PLATINUM

  @@map("tier")
}

enum FoodCategory {
  APPETIZERS
  WINGS
  FAJITAS
  BURGERS
  STEAKS
  SEAFOOD
  BEVERAGES
  DESSERTS

  @@map("food_category")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  points    Int      @default(0)
  tier      Tier?
  orders    Orders[]
  cart      Cart?

  @@map("user")
}

model Cart {
  id     Int        @id @default(autoincrement())
  total  Decimal    @db.Decimal(10, 2)
  userId Int        @unique
  user   User       @relation(fields: [userId], references: [id])
  items  MenuItem[]

  @@map("cart")
}

model Restaurant {
  id           Int            @id @default(autoincrement())
  name         String
  address      String
  phone        String
  menu         Menu?          @relation
  menuId       Int?           @unique
  orders       Orders[]
  Reservations Reservations[]

  @@map("restaurant")
}

model Orders {
  id           Int        @id @default(autoincrement())
  userId       Int
  restaurantId Int
  total        Decimal    @db.Decimal(10, 2)
  user         User       @relation(fields: [userId], references: [id])
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

  @@index([userId], name: "userId")
  @@index([restaurantId], name: "restaurantId")
  @@map("orders")
}

model Reservations {
  id           Int         @id @default(autoincrement())
  name         String
  date         DateTime
  size         Int
  restaurantId Int
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])

  @@map("reservations")
}

model Menu {
  id                  Int        @id @default(autoincrement())
  items               MenuItem[]
  found_at_restaurant Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId        Int        @unique

  @@map("menu")
}

model MenuItem {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  price       Float
  description String
  category    FoodCategory

  menu   Menu? @relation(fields: [menuId], references: [id])
  menuId Int?
  Cart   Cart? @relation(fields: [cartId], references: [id])
  cartId Int?

  @@map("menu_item")
}
